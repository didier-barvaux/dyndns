#!/bin/bash
#
# Copyright (c) 2015 Didier Barvaux
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# Name:         dyndns
# Description:  Update the given dynamic DNS A record using the given HTTP URI
#               to determine the public IP address of the host and the given
#               crypto key.
# Dependencies: bash, curl, awk, grep, nsupdate, logger, mktemp.
# Author:       Didier Barvaux <didier@barvaux.org>
# License:      Simplified BSD License
#

SCRIPT_NAME="dyndns"
SCRIPT_VERSION="0.1"
SCRIPT_URI="https://github.com/didier-barvaux/dyndns"
LOG_FACILITY="local1"
HTTP_USER_AGENT="${SCRIPT_NAME}/${SCRIPT_VERSION}"
HTTP_MAX_TRIES=3
HTTP_TIMEOUT=30  # in seconds

dyndns_log()
{  
	local log_level="$1"
	local log_msg="$2"

	logger -s -t "${SCRIPT_NAME}" -p ${LOG_FACILITY}.${log_level} "${log_msg}"
}

# parse arguments
# (there is no special protection on arguments, input is considered safe)
if [ $# -eq 1 ] && [ "$1" = "--version" ] ; then
	echo "${SCRIPT_NAME} version ${SCRIPT_VERSION}"
	exit 0
elif [ "$1" = "--help" ] || [ $# -ne 5 ] ; then
	echo "dyndns - simple dynamic DNS"
	echo
	echo "Update the given dynamic DNS A record remotely."
	echo
	echo "A remote HTTP(S) URI is used to determine the public IP address of the host."
	echo "A crypto key is used to secure the communication with the DNS server that"
	echo "hosts the DNS zone to update."
	echo
	echo "Usage: ${SCRIPT_NAME} [options] HTTP_CHECK_URI DNS_KEY_FILE DNS_SERVER DNS_ZONE DNS_HOST"
	echo
	echo "Parameters:"
	echo "  HTTP_CHECK_URI  The HTTP URI that determines the public IP address of the host"
	echo "  DNS_KEY_FILE    The file that contains the crypto key (with suffix .key)"
	echo "  DNS_SERVER      The DNS server that hosts the DNS zone to update"
	echo "  DNS_ZONE        The DNS zone to update"
	echo "  DNS_HOST        The DNS host to update with the public IP address"
	echo
	echo "Options:"
	echo "  -h, --help      Print this help message"
	echo "  -v, --version   Print software version and quit"
	echo
	echo "Examples:"
	echo "  dyndns https://example.com/checkip.php /etc/dyndns/Kdyn.example.com.+xxx+yyyyy.key ns1.example.com dyn.example.com myfirsthost.dyn.example.com.  Update myfirsthost.dyn.example.com with its current public IP address"
	echo
	echo "Report bugs to <${SCRIPT_URI}>."
	exit 1
fi
http_uri="$1"
dns_keyfile="$2"
dns_server="$3"
dns_zone="$4"
dns_host="$5"

if [ ! -e "${dns_keyfile}" ] ; then
	dyndns_log "err" "failed to open public crypto key: file not found"
	exit 1
fi
if [ ! -e "$( dirname "${dns_keyfile}" )/$( basename "${dns_keyfile}" ".key" ).private" ] ; then
	dyndns_log "err" "failed to open private crypto key: file not found"
	exit 1
fi

# create a secure temporary file
DYNDNS_TMP_FILE="$( mktemp --tmpdir "dyndns.tmp.XXXXXXXXXX" )"
ret=$?
if [ ${ret} -ne 0 ] ; then
	dyndns_log "err" "failed to create a temporary file: mktemp exited with code ${ret}"
	exit 1
fi

# retrieve the public IP address of the host thanks to a remote HTTP server
ip_address="$( curl --silent \
                    --proto -all,https,+http \
                    --location \
                    --user-agent "${HTTP_USER_AGENT}" \
                    --retry ${HTTP_MAX_TRIES} \
                    --max-time ${HTTP_TIMEOUT} \
                    --max-filesize 200 \
                    --dump-header "${DYNDNS_TMP_FILE}" \
                    "${http_uri}" )"
ret=$?

# print a detailled message in case of failure
if [ ${ret} -ne 0 ] ; then
	if [ ${ret} -eq 6 ] ; then
		msg="Couldn't resolve host. The given remote host was not resolved."
	elif [ ${ret} -eq 7 ] ; then
		msg="Failed to connect to host."
	elif [ ${ret} -eq 28 ] ; then
		msg="Operation timeout. The specified time-out period was reached according to the conditions."
	elif [ ${ret} -eq 35 ] ; then
		msg="SSL connect error. The SSL handshaking failed."
	elif [ ${ret} -eq 51 ] ; then
		msg="The peer's SSL certificate or SSH MD5 fingerprint was not OK."
	elif [ ${ret} -eq 52 ] ; then
		msg="The server didn't reply anything, which here is considered an error."
	elif [ ${ret} -eq 60 ] ; then
		msg="Peer certificate cannot be authenticated with known CA certificates."
	elif [ ${ret} -eq 61 ] ; then
		msg="Unrecognized transfer encoding."
	elif [ ${ret} -eq 63 ] ; then
		msg="Maximum file size exceeded."
	else
		msg="no description yet"
	fi
	dyndns_log "err" "failed to retrieve the public IP address: HTTP download failed: ${msg} (${ret})"
	rm -f "${DYNDNS_TMP_FILE}"
	exit 1
fi

# curl returns 0 even if the feed wasn't retrieved successfully (for example
# 403 Forbidden code), so retrieve the exact HTTP status code
http_code="$( grep --text '^HTTP' "${DYNDNS_TMP_FILE}" | tail -n 1 | awk '{ printf $2}' )" # keep the last HTTP reply (in case of redirection)
echo "${http_code}" | grep -q '^[0-9]\{3\}$'
if [ $? -ne 0 ] ; then
	dyndns_log "err" "failed to retrieve the public IP address: HTTP download failed: malformed HTTP status code"
	rm -f "${DYNDNS_TMP_FILE}"
	exit 1
fi
if [ "${http_code}" != "200" ] ; then
	dyndns_log "err" "failed to retrieve the public IP address: HTTP download failed: received code ${http_code}"
	rm -f "${DYNDNS_TMP_FILE}"
	exit 1
fi

# check the format of the public IP address
echo "${ip_address}" | grep -q '^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$'
nsupdate -v -k ${dns_keyfile} <<EOF
server ${dns_server}
zone ${dns_zone}
update delete ${dns_host} A
update add ${dns_host} 600 A ${ip_address}
send
EOF

# remove the temporary file
rm -f "${DYNDNS_TMP_FILE}"

